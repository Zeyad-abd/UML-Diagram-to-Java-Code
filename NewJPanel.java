package UMLtoJavaSource;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.BufferedWriter;
import javax.swing.JPanel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Home
 */
public class NewJPanel extends javax.swing.JPanel {

    ArrayList<ArrayList<String>> javaSourceCode = new ArrayList<>();
    
    ArrayList<String> class_code = new ArrayList<>();
    
    /**
     * Creates new form NewJPanel
     */
    public NewJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        importButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        umlTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        javaTextArea = new javax.swing.JTextArea();
        exportButton = new javax.swing.JButton();
        umlLabel = new javax.swing.JLabel();
        classnameDropdown = new javax.swing.JComboBox<>();
        javaLabel = new javax.swing.JLabel();

        importButton.setBackground(new java.awt.Color(204, 255, 255));
        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        umlTextArea.setColumns(20);
        umlTextArea.setRows(5);
        jScrollPane1.setViewportView(umlTextArea);

        javaTextArea.setColumns(20);
        javaTextArea.setRows(5);
        jScrollPane2.setViewportView(javaTextArea);

        exportButton.setBackground(new java.awt.Color(204, 255, 255));
        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        umlLabel.setBackground(new java.awt.Color(204, 255, 255));
        umlLabel.setText("UML");

        classnameDropdown.setBackground(new java.awt.Color(204, 255, 255));
        classnameDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        classnameDropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                classnameDropdownItemStateChanged(evt);
            }
        });

        javaLabel.setText("JAVA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(exportButton))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(importButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(umlLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classnameDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(javaLabel)
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classnameDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(javaLabel)
                            .addComponent(umlLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addComponent(exportButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt", "json"));
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                String content = new String(Files.readAllBytes(Paths.get(selectedFile.getAbsolutePath())));
                umlTextArea.setText("");
            javaTextArea.setText("");
            classnameDropdown.removeAllItems();
                umlTextArea.setText(content);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(NewJPanel.this, "Error reading file: " + ex.getMessage());
            }  
        }
        convert();
    }//GEN-LAST:event_importButtonActionPerformed

    private void dropdownNames() {
        classnameDropdown.removeAllItems();
        for (ArrayList<String> classInfo : javaSourceCode) {
            classnameDropdown.addItem(classInfo.get(0));
        }
        if (classnameDropdown.getItemCount() > 0) {
            classnameDropdown.setSelectedIndex(0);
        }
    }
    
    private void convert() {
        String umlJson = umlTextArea.getText();
        String filePath = "data.json";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(umlJson);
        } catch (IOException e) {
            e.printStackTrace();
        }
        ArrayList<ArrayList<String>> result = JSONToJavaClassConverter.convertJSONToJavaClasses(filePath);
        javaSourceCode.clear(); 
        // Print the result
        for (ArrayList<String> classArray : result) {
            javaSourceCode.add(new ArrayList<>(Arrays.asList(classArray.get(0), classArray.get(1))));
        }

           
        dropdownNames();
        classnameDropdown.setSelectedIndex(0); 
    }
    
    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add your handling code here:
        String selectedClass = (String) classnameDropdown.getSelectedItem();
        if (selectedClass == null || selectedClass.isEmpty()) {
            JOptionPane.showMessageDialog(NewJPanel.this, "No class selected for export.");
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Java Files", "java"));
        // Set the default file name
        fileChooser.setSelectedFile(new File(selectedClass + ".java"));
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            if (!selectedFile.getAbsolutePath().endsWith(".java")) {
                selectedFile = new File(selectedFile.getAbsolutePath() + ".java");
            }
            try (FileWriter writer = new FileWriter(selectedFile)) {
                writer.write(javaTextArea.getText());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(NewJPanel.this, "Error writing file: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    
    private void classnameDropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_classnameDropdownItemStateChanged
        String selectedClass = (String) classnameDropdown.getSelectedItem();
        if (selectedClass == null) {
            JOptionPane.showMessageDialog(this, "No class selected.");
            return;
        }
        for (ArrayList<String> classInfo : javaSourceCode) {
            if (selectedClass.equals(classInfo.get(0))) {
                javaTextArea.setText(classInfo.get(1));
                break;
            }
        }
    }//GEN-LAST:event_classnameDropdownItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> classnameDropdown;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel javaLabel;
    private javax.swing.JTextArea javaTextArea;
    private javax.swing.JLabel umlLabel;
    private javax.swing.JTextArea umlTextArea;
    // End of variables declaration//GEN-END:variables
}
